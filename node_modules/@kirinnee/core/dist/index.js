(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})((typeof window !== 'undefined' ? window : this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Kore.ts":
/*!*********************!*\
  !*** ./src/Kore.ts ***!
  \*********************/
/*! exports provided: Kore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Kore", function() { return Kore; });
/* harmony import */ var _SortType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SortType */ "./src/SortType.ts");

var Kore = /** @class */ (function () {
    function Kore() {
        // readonly SPACE: string = "&nbsp;";
        // readonly LEFT_TAG: string = "&lt;";
        // readonly RIGHT_TAG: string = "&gt;";
        // readonly AMPERSAND: string = "&amp;";
        // readonly SINGLE_QUOTE: string = "&#39;";
        // readonly DOUBLE_QUOTE: string = "&quot;";
        this.m = ' _-,;:!?.\'"()[]{ }@*/\&#%`^+<=>|~$0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ';
        // private fileCheck(path: any): string {
        // 	if (!this.IsFile(path)) this.t("Invalid path: " + path);
        // 	return this.parseFile(path);
        // }
        //
        // // noinspection JSMethodCanBeStatic
        // private parseFile(path: string): string {
        // 	return path.ReplaceAll("\\\\", "/");
        // }
        //
        // private IsFile(path: any): boolean {
        // 	if (!this.IsString(path)) return false;
        // 	let s: string = this.parseFile(path as string);
        // 	if (s.Starts(".")) return true;
        // 	return s.split('.').length > 1;
        // }
    }
    Kore.prototype.AssertExtend = function () {
        if (!this.IsExtended)
            this.t("Core needs to be extended");
    };
    Object.defineProperty(Kore.prototype, "IsExtended", {
        get: function () {
            return Map.prototype.All != null;
        },
        enumerable: true,
        configurable: true
    });
    Kore.prototype.ExtendPrimitives = function () {
        var c = this;
        // String.prototype.EscapeChar = function (space: boolean): string {
        // 	if (this.length > 1) {
        // 		c.t("Only can escape characters. String cannot be longer than 1");
        // 	}
        // 	switch (this) {
        // 		case "&":
        // 			return c.AMPERSAND;
        // 		case "<":
        // 			return c.LEFT_TAG;
        // 		case ">":
        // 			return c.RIGHT_TAG;
        // 		case "'":
        // 			return c.SINGLE_QUOTE;
        // 		case '"':
        // 			return c.DOUBLE_QUOTE;
        // 		case " ":
        // 			return space ? c.SPACE : this;
        // 		default:
        // 			return this;
        // 	}
        // };
        // String.prototype.EscapeHTML = function (space: boolean): string {
        // 	return this.split('').Map((s: string) => s.EscapeChar(space)).join("");
        // };
        // // String.prototype.BreakIntoArray = function (cArr: string[] = []): string[] {
        // // 	if (this.length === 0) return cArr;
        // // 	let f: string = this.charAt(0);
        // // 	if (f !== "&") {
        // // 		cArr.push(f);
        // // 		return this.Skip(1).BreakIntoArray(cArr);
        // // 	} else {
        // // 		let ret: string = this;
        // // 		let six = this.Take(6);
        // // 		let five = this.Take(5);
        // // 		let four = this.Take(4);
        // // 		if (six === c.SPACE) {
        // // 			cArr.push(c.SPACE);
        // // 			ret = this.Skip(6);
        // // 		} else if (six === c.DOUBLE_QUOTE) {
        // // 			cArr.push(c.DOUBLE_QUOTE);
        // // 			ret = this.Skip(6);
        // // 		} else if (five === c.AMPERSAND) {
        // // 			cArr.push(c.AMPERSAND);
        // // 			ret = this.Skip(5);
        // // 		} else if (five === c.SINGLE_QUOTE) {
        // // 			cArr.push(c.SINGLE_QUOTE);
        // // 			ret = this.Skip(5);
        // // 		} else if (four === c.LEFT_TAG) {
        // // 			cArr.push(c.LEFT_TAG);
        // // 			ret = this.Skip(4);
        // // 		} else if (four === c.RIGHT_TAG) {
        // // 			cArr.push(c.RIGHT_TAG);
        // // 			ret = this.Skip(4);
        // // 		} else {
        // // 			cArr.push(f);
        // // 			ret = this.Skip(1);
        // // 		}
        // // 		return ret.BreakIntoArray(cArr);
        // // 	}
        // // };
        // String.prototype.WrapIn = function (tag: string): string {
        // 	return `<${tag}>${this}</${tag}>`;
        // };
        // String.prototype.RemoveURLVariable = function (): string {
        // 	let split: string[] = this.split('?');
        // 	return split.length === 1 ? this : split.Omit(1).join('?');
        // };
        //
        // String.prototype.IsFile = function (): boolean {
        // 	return c.IsFile(this as string);
        // };
        //
        // String.prototype.HasDir = function (): boolean {
        // 	return c.fileCheck(this).split("/").length > 1;
        // };
        //
        // String.prototype.GetExt = function (): string {
        // 	return "." + c.fileCheck(this).split('.').pop();
        // };
        //
        // String.prototype.GetName = function (): string {
        // 	return c.fileCheck(this)
        // 		.split(".")
        // 		.Omit(1)
        // 		.join(".")
        // 		.split("/").pop()!;
        // };
        //
        // String.prototype.GetDir = function (): string {
        // 	let path = c.fileCheck(this);
        // 	if (!path.HasDir()) return "";
        // 	return path.split(".").Omit(1).join(".").split("/").Omit(1).join("/").FormatDir();
        // };
        //
        // String.prototype.ReplaceExt = function (replacement: string): string {
        // 	let path = c.fileCheck(this);
        // 	if (replacement.Starts(".")) replacement = replacement.Skip(1);
        // 	return path.GetDir().FormatDir() + (path.GetName() + "." + replacement).FormatFile();
        // };
        //
        // String.prototype.EditExt = function (modify: (s: string) => string): string {
        // 	let path = c.fileCheck(this);
        // 	return path.ReplaceExt(modify(path.GetExt().Skip(1)));
        // };
        //
        // String.prototype.ReplaceName = function (replacement: string): string {
        // 	let path = c.fileCheck(this);
        // 	if (replacement.Starts("/")) replacement = replacement.Skip(1);
        // 	if (replacement.Ends(".")) replacement = replacement.Omit(1);
        // 	return (path.GetDir().FormatDir() + replacement + path.GetExt()).FormatFile();
        // };
        //
        // String.prototype.EditName = function (modify: (s: string) => string): string {
        // 	let path = c.fileCheck(this);
        // 	return path.ReplaceName(modify(path.GetName()));
        // };
        //
        // String.prototype.ReplaceDir = function (replacement: string): string {
        // 	let path = c.fileCheck(this);
        // 	return (replacement.FormatDir() + path.split("/").pop()!.FormatFile()).FormatFile();
        // };
        //
        // String.prototype.EditDir = function (modify: (s: string) => string): string {
        // 	let path = c.fileCheck(this);
        // 	return path.ReplaceDir(modify(path.GetDir()));
        // };
        //
        // String.prototype.FormatDir = function (): string {
        // 	let path = c.parseFile(this);
        // 	if (!c.IsString(path)) c.t("directory cannot be empty");
        // 	if (path.Starts("/")) path = path.Skip(1);
        // 	if (!path.Ends("/")) path += "/";
        // 	return path;
        // };
        //
        // String.prototype.FormatFile = function () {
        // 	let path = c.fileCheck(this);
        // 	return path.Starts("/") ? path.Skip(1) : path;
        // };
        /*=================
         strings
         ==================*/
        String.prototype.Match = function (regex) {
            return this.match(regex) || [];
        };
        String.prototype.ReplaceAll = function (regex, replace) {
            return this.replace(new RegExp(regex, 'g'), replace);
        };
        String.prototype.IsEmpty = function () {
            return this.trim().length === 0;
        };
        String.prototype.Starts = function (start) {
            if (this.IsEmpty() || start.IsEmpty())
                return false;
            var s = start.trim();
            var target = this.trim();
            return target.Take(s.length) === s;
        };
        String.prototype.Ends = function (end) {
            if (this.IsEmpty() || end.IsEmpty())
                return false;
            var s = end.trim();
            var target = this.trim();
            return target.Last(s.length) === s;
        };
        String.prototype.CharAt = function (val) {
            if ((val > -1 && val >= this.length) || (val < 0 && -val > this.length)) {
                c.t("Cannot exceed length of string");
            }
            return this.charAt(val + (val < 0 ? this.length : 0));
        };
        String.prototype.RemoveCharAt = function (val) {
            var i = val + (val < 0 ? this.length : 0);
            if ((val > -1 && val >= this.length) || (-val >= this.length + 1 && val < 0)) {
                c.t("Cannot exceed length of string");
            }
            return this.Take(i) + this.Skip(i + 1);
        };
        String.prototype.Remove = function (target) {
            return this.split(target).join("");
        };
        String.prototype.Without = function (without) {
            var ret = this;
            without.Each(function (s) { return ret = ret.Remove(s); });
            return ret;
        };
        String.prototype.Skip = function (val) {
            return this.substr(val);
        };
        String.prototype.Take = function (val) {
            return val == null ? this.length === 0 ? "" : this.charAt(0) : this.substr(0, val);
        };
        String.prototype.Last = function (val) {
            return val == null ? this.length === 0 ? "" : this.charAt(this.length - 1) : this.substr(this.length - val);
        };
        String.prototype.Omit = function (val) {
            return this.substr(0, this.length - val);
        };
        String.prototype.Repeat = function (val) {
            if (val < 0) {
                c.t("Count cannot be negative");
            }
            return this.repeat(val);
        };
        String.prototype.Count = function (target) {
            var regExp = new RegExp(target, "gi");
            return (this.Match(regExp)).length;
        };
        String.prototype.Capitalize = function () {
            return this.Take(1).toUpperCase() + this.Skip(1);
        };
        String.prototype.CapitalizeWords = function () {
            return this.split(' ').Map(function (s) { return s.Capitalize(); }).join(' ');
        };
        String.prototype.IsAlphanumeric = function () {
            if (this.IsEmpty())
                return false;
            var ret = this.split('')
                .Map(function (c) { return c.charCodeAt(0); })
                .When(function (code) { return !(code > 47 && code < 58) && !(code > 64 && code < 91) && !(code > 96 && code < 123); }, function () { return false; });
            return ret == null;
        };
        String.prototype.IsHexadecimal = function () {
            if (this.IsEmpty())
                return false;
            var a = parseInt(this.toLowerCase(), 16);
            return (a.toString(16) === this.toLowerCase());
        };
        String.prototype.LineBreak = function () {
            return this.ReplaceAll('\r\n', '\n').ReplaceAll('\r', '\n').split('\n');
        };
        Number.prototype.Odd = function () {
            if (!this.Int() || this === 0)
                return false;
            return this % 2 !== 0;
        };
        Number.prototype.Even = function () {
            if (!this.Int() || this === 0)
                return false;
            return this % 2 === 0;
        };
        Number.prototype.Int = function () {
            if (!c.IsNumber(this))
                return false;
            return Math.abs(this % 1) < 0.000000000000001;
        };
        Number.prototype.Finite = function () {
            if (!c.IsAnyNumber(this))
                return false;
            return !this.NaN() && isFinite(this);
        };
        Number.prototype.Infinite = function () {
            if (!c.IsAnyNumber(this))
                return false;
            return !this.NaN() && !isFinite(this);
        };
        Number.prototype.NaN = function () {
            return isNaN(this);
        };
        Number.prototype.RoundOff = function () {
            c.A(this);
            var m = this < 0 ? -1 : 1;
            return m * Math.round(m * this);
        };
        Number.prototype.Ceil = function () {
            c.A(this);
            var m = this < 0 ? -1 : 1;
            return m * Math.ceil(m * this);
        };
        Number.prototype.Floor = function () {
            c.A(this);
            var m = this < 0 ? -1 : 1;
            return m * Math.floor(m * this);
        };
        Number.prototype.Abs = function () {
            c.A(this);
            return Math.abs(this);
        };
        Number.prototype.Root = function () {
            c.A(this);
            if (this < 0)
                c.t("Can't root negative");
            return Math.sqrt(this);
        };
        Number.prototype.ToInt = function () {
            return c.i(this);
        };
        Number.prototype.ToFloat = function () {
            return c.f(this);
        };
        String.prototype.ToInt = function () {
            return c.i(this);
        };
        String.prototype.ToFloat = function () {
            return c.f(this);
        };
        Number.prototype.AtMax = function (max) {
            c.A(this);
            return Math.min(this, max);
        };
        Number.prototype.AtMin = function (min) {
            c.A(this);
            return Math.max(this, min);
        };
        Number.prototype.Clamp = function (constrain1, constrain2) {
            c.A(this);
            return this.AtMax(constrain1.AtMin(constrain2)).AtMin(constrain1.AtMax(constrain2));
        };
        Number.prototype.RandomTo = function (to, integer) {
            c.A(this);
            if (integer) {
                return (this + Math.random() * (to - this + 1)).Floor();
            }
            else {
                return (this + Math.random() * (to - this + 1)).AtMax(to);
            }
        };
        Number.prototype.RandomFor = function (to, integer) {
            return this.RandomTo(this + to - 1, integer);
        };
        Array.prototype.Flatten = function () {
            return this.length === 0 ? [] : this.Reduce(function (a, b) { return a.concat(b); });
        };
        Array.prototype.Merge = function (values) {
            if (this.length !== values.length)
                throw "Array has to be same length";
            var map = new Map();
            this.Each(function (e, i) { return map.set(e, values[i]); });
            return map;
        };
        Array.prototype.AsKey = function (valueFunction) {
            var map = new Map();
            this.Each(function (e, i) { return map.set(e, valueFunction(e, i)); });
            return map;
        };
        Array.prototype.AsValue = function (keyFunction) {
            var map = new Map();
            this.Each(function (e, i) { return map.set(keyFunction(e, i), e); });
            return map;
        };
        Array.prototype.TrimAll = function () {
            return this.Map(function (s) { return s.trim(); });
        };
        Array.prototype.Sort = function (type, Definier) {
            var nArr = this.slice();
            if (Definier == null) {
                if ((type.IsNum && !c.IsNumberArray(nArr)) || (!c.IsStringArray(nArr) && !type.IsNum)) {
                    c.t("Please provide scoring strategy");
                }
            }
            if (Definier == null)
                Definier = (function (a) { return a; });
            var o = (type === _SortType__WEBPACK_IMPORTED_MODULE_0__["SortType"].Ascending || type === _SortType__WEBPACK_IMPORTED_MODULE_0__["SortType"].AtoZ) ? 1 : -1;
            var f = function (a, b) { return (type.IsNum ? (Definier(a) > Definier(b) ? 1 : -1) : c.lc(Definier(a), Definier(b))) * o; };
            nArr.sort(f);
            return nArr;
        };
        Array.prototype.Reverse = function () {
            var ret = [];
            this.Each(function (e) { return ret.push(e); }, true);
            return ret;
        };
        Array.prototype.Has = function (target, deep) {
            if (deep === void 0) { deep = false; }
            return this.When(function (e) { return c.Eq(e, target, deep); }, function () { return true; }) || false;
        };
        Array.prototype.Where = function (predicate) {
            var ret = [];
            this.When(predicate, function (e) { ret.push(e); }, false);
            return ret;
        };
        Array.prototype.Map = function (application) {
            var ret = [];
            this.Each(function (e, i) { return ret.push(application(e, i)); });
            return ret;
        };
        Array.prototype.Each = function (application, reverse) {
            if (reverse === void 0) { reverse = false; }
            if (!reverse) {
                for (var i = 0; i < this.length; i++) {
                    application(this[i], i);
                }
                return this;
            }
            for (var i = this.length - 1; i >= 0; i--) {
                application(this[i], i);
            }
            return this;
        };
        Array.prototype.RemoveValue = function (target, deep) {
            if (deep === void 0) { deep = false; }
            return this.Where(function (e) { return !c.Eq(e, target, deep); });
        };
        Array.prototype.Without = function (arr, deep) {
            if (deep === void 0) { deep = false; }
            return this.Where(function (e) { return !arr.Has(e, deep); });
        };
        Array.prototype.WithoutIndex = function (w) {
            return this.Where(function (e, i) { return !w.Has(i); });
        };
        Array.prototype.Fill = function (amt, fillFunction) {
            var arr = this.slice();
            for (var i = 0; i < amt; i++) {
                arr.push(fillFunction(i));
            }
            return arr;
        };
        Array.prototype.RemoveIndex = function (index) {
            return this.Where(function (e, i) { return i !== index; });
        };
        Array.prototype.Take = function (val) {
            if (val == null) {
                if (this.length === 0)
                    return null;
                return this[0];
            }
            return this.slice(0, val);
        };
        Array.prototype.TakeWhile = function (predicate) {
            var ret = [];
            this.When(predicate, function (e) { ret.push(e); }, true);
            return ret;
        };
        Array.prototype.Skip = function (val) {
            return this.slice(val);
        };
        Array.prototype.SkipWhile = function (predicate) {
            var skip = 0;
            this.When(predicate, function () { skip++; }, true);
            return this.Skip(skip);
        };
        Array.prototype.Omit = function (val) {
            return this.slice(0, -val);
        };
        Array.prototype.OmitWhile = function (predicate) {
            var cut = 0;
            this.Reverse().When(predicate, function () { cut++; }, true);
            return this.Omit(cut);
        };
        Array.prototype.Last = function (val) {
            if (val == null) {
                if (this.length === 0)
                    return null;
                return this[this.length - 1];
            }
            var sv = this.length - val;
            return this.slice(sv > 0 ? sv : 0);
        };
        Array.prototype.LastWhile = function (predicate) {
            var last = 0;
            this.Reverse().When(predicate, function () { last++; }, true);
            return this.Last(last);
        };
        Array.prototype.FirstIndexOf = function (target, deep) {
            if (deep === void 0) { deep = false; }
            return this.FindIndex(function (e) { return c.Eq(e, target, deep); });
        };
        Array.prototype.Count = function (target, deep) {
            if (deep === void 0) { deep = false; }
            return this.Where(function (s) { return c.Eq(s, target, deep); }).length;
        };
        Array.prototype.Indexes = function (target, deep) {
            if (deep === void 0) { deep = false; }
            var index = [];
            this.When(function (e) { return c.Eq(e, target, deep); }, function (e, i) { index.push(i); });
            return index;
        };
        Array.prototype.Unique = function (deep) {
            var _this = this;
            if (deep === void 0) { deep = false; }
            return this.Where(function (e, i) { return _this.FirstIndexOf(e, deep) === i; });
        };
        Array.prototype.Union = function (arr, deep) {
            if (deep === void 0) { deep = false; }
            return this.concat(arr).Unique(deep);
        };
        Array.prototype.Intersect = function (arr, deep) {
            if (deep === void 0) { deep = false; }
            return this.Unique(deep).Where(function (e) { return arr.Has(e, deep); });
        };
        Array.prototype.Outer = function (ar, deep) {
            if (deep === void 0) { deep = false; }
            return this.Union(ar, deep).Without(this.Intersect(ar, deep), deep);
        };
        // noinspection JSUnusedLocalSymbols
        Array.prototype.Max = function (f) {
            if (f === void 0) { f = function (t, i) { return t; }; }
            return this.Reverse()
                .Reduce(function (a, b, i) {
                return f(a, i - 1) > f(b, i) ? a : b;
            });
        };
        // noinspection JSUnusedLocalSymbols
        Array.prototype.Min = function (f) {
            if (f === void 0) { f = function (t, i) { return t; }; }
            return this.Reverse()
                .Reduce(function (a, b, i) {
                return f(a, i - 1) < f(b, i) ? a : b;
            });
        };
        Array.prototype.Sum = function (f) {
            if (f === void 0) { f = function (t) { return t; }; }
            return this.Map(function (e, i) { return f(e, i); })
                .Reduce(function (a, b) { return a + b; });
        };
        Array.prototype.Reduce = function (r) {
            if (this.length === 0)
                c.t("Empty Array");
            if (this.length === 1)
                return this[0];
            var ret = this[0];
            for (var i = 1; i < this.length; i++) {
                ret = r(ret, this[i], i - 1);
            }
            return ret;
        };
        Array.prototype.Find = function (predicate) {
            var ret = this.When(predicate, function (e) { return e; });
            return ret == null ? null : ret;
        };
        Array.prototype.FindIndex = function (predicate) {
            var ret = this.When(predicate, function (e, i) { return i; });
            return ret == null ? null : ret;
        };
        Array.prototype.Any = function (predicate) {
            return this.When(predicate, function () { return true; }) || false;
        };
        Array.prototype.All = function (predicate) {
            return !this.Any(function (e, i) { return !predicate(e, i); });
        };
        Array.prototype.When = function (predicate, ifTrue, breakWhenFalse) {
            if (breakWhenFalse === void 0) { breakWhenFalse = false; }
            for (var i = 0; i < this.length; i++) {
                if (predicate(this[i], i)) {
                    var ret = ifTrue(this[i], i);
                    if (typeof ret !== "undefined") {
                        return ret;
                    }
                }
                else {
                    if (breakWhenFalse) {
                        break;
                    }
                }
            }
        };
        Array.prototype.Random = function () {
            if (this.length === 0)
                return null;
            if (this.length === 1)
                return this[0];
            return this[(0).RandomFor(this.length, true)];
        };
        Map.prototype.TrimValue = function () {
            return this.MapValue(function (v) { return v.trim(); });
        };
        Map.prototype.SortByKey = function (type, Definer) {
            var arr = this.Arr();
            arr = arr.Sort(type, Definer == null ? function (e) { return e[0]; } : function (e) { return Definer(e[0]); });
            return new Map(arr);
        };
        Map.prototype.SortByValue = function (type, Definer) {
            var arr = this.Arr();
            arr = arr.Sort(type, Definer == null ? function (e) { return e[1]; } : function (e) { return Definer(e[1]); });
            return new Map(arr);
        };
        Map.prototype.Reverse = function () {
            return new Map(this.Arr().Reverse());
        };
        Map.prototype.HasKey = function (search, deep) {
            return this.Keys().Has(search, deep);
        };
        Map.prototype.HasValue = function (search, deep) {
            return this.Values().Has(search, deep);
        };
        Map.prototype.Where = function (predicate) {
            return new Map(this.Arr().Where(function (e) { return c.M(e, predicate); }));
        };
        Map.prototype.MapKey = function (transform) {
            var ret = new Map();
            this.Each(function (k, v) { return ret.set(transform(k, v), v); });
            return ret;
        };
        Map.prototype.MapValue = function (transform) {
            var ret = new Map();
            this.Each(function (k, v) { return ret.set(k, transform(v, k)); });
            return ret;
        };
        Map.prototype.Map = function (transform) {
            var ret = [];
            this.Each(function (k, v) { return ret.push(transform(k, v)); });
            return ret;
        };
        Map.prototype.Each = function (transform) {
            var ret = new Map();
            this.Arr().Each(function (e) {
                transform(e[0], e[1]);
                ret.set(e[0], e[1]);
            });
            return ret;
        };
        Map.prototype.RemoveKey = function (key, deep) {
            if (deep === void 0) { deep = false; }
            return this.Where(function (k) { return !c.Eq(key, k, deep); });
        };
        Map.prototype.RemoveValue = function (val, deep) {
            if (deep === void 0) { deep = false; }
            return this.Where(function (k, v) { return !c.Eq(v, val, deep); });
        };
        Map.prototype.Without = function (keys, values, deep) {
            if (deep === void 0) { deep = false; }
            return this.Where(function (k, v) { return !keys.Has(k, deep) && !values.Has(v, deep); });
        };
        Map.prototype.Take = function (val) {
            if (val == null) {
                var l = this.Arr().Take();
                return l == null ? null : c.P(l);
            }
            return new Map(this.Arr().Take(val));
        };
        Map.prototype.TakeWhile = function (predicate) {
            return new Map(this.Arr().TakeWhile(function (e) { return c.M(e, predicate); }));
        };
        Map.prototype.Skip = function (val) {
            return new Map(this.Arr().Skip(val));
        };
        Map.prototype.SkipWhile = function (predicate) {
            return new Map(this.Arr().SkipWhile(function (e) { return c.M(e, predicate); }));
        };
        Map.prototype.Omit = function (val) {
            return new Map(this.Arr().Omit(val));
        };
        Map.prototype.OmitWhile = function (predicate) {
            return new Map(this.Arr().OmitWhile(function (e) { return c.M(e, predicate); }));
        };
        Map.prototype.Last = function (val) {
            if (val == null) {
                var l = this.Arr().Last();
                return l == null ? null : c.P(l);
            }
            return new Map(this.Arr().Last(val));
        };
        Map.prototype.LastWhile = function (predicate) {
            return new Map(this.Arr().LastWhile(function (e) { return c.M(e, predicate); }));
        };
        Map.prototype.Arr = function () {
            return Array.from(this.entries());
        };
        Map.prototype.Keys = function () {
            return Array.from(this.keys());
        };
        Map.prototype.Values = function () {
            return Array.from(this.values());
        };
        Map.prototype.AsObject = function (key) {
            if (key === void 0) { key = function (k) { return k.toString(); }; }
            var ret = {};
            this.MapKey(key).Each(function (k, v) { return ret[k] = v; });
            return ret;
        };
        Map.prototype.Find = function (predicate) {
            var pair = this.Arr().Find(function (e) { return c.M(e, predicate); });
            if (pair == null)
                return null;
            return c.P(pair);
        };
        Map.prototype.Max = function (f) {
            return c.P(this.Arr().Max(function (e) { return f(e[0], e[1]); }));
        };
        Map.prototype.Min = function (f) {
            return c.P(this.Arr().Min(function (e) { return f(e[0], e[1]); }));
        };
        Map.prototype.Sum = function (f) {
            return this.Arr().Sum(function (e) { return f(e[0], e[1]); });
        };
        Map.prototype.Reduce = function (r) {
            return this.Arr().Map(function (e) { return c.P(e); }).Reduce(r);
        };
        Map.prototype.Any = function (predicate) {
            return this.Arr().Any(function (e) { return c.M(e, predicate); });
        };
        Map.prototype.All = function (predicate) {
            return this.Arr().All(function (e) { return c.M(e, predicate); });
        };
    };
    Kore.prototype.DeepEqual = function (a, b) {
        var c = this;
        if (a === b)
            return true;
        if (typeof a === "undefined" || typeof b === "undefined")
            return false;
        if (a === null || b === null)
            return false;
        if (typeof a !== typeof b)
            return false;
        if (c.TC(a, b, "string"))
            return String(a) === String(b);
        if (c.TC(a, b, "number"))
            return isNaN(a) ? isNaN(b) : a === b;
        if (c.TC(a, b, "boolean"))
            return a === b;
        if (a instanceof Date) {
            return a.valueOf() === b.valueOf();
        }
        if (a.constructor !== b.constructor)
            return false;
        // noinspection SuspiciousInstanceOfGuard
        if (a instanceof Function || a instanceof RegExp)
            return a.toString() === b.toString();
        // noinspection SuspiciousInstanceOfGuard
        if (this.IsArray(a)) {
            if (!this.IsArray(b))
                return false;
            if (a.length !== b.length)
                return false;
        }
        // noinspection SuspiciousInstanceOfGuard
        // noinspection SuspiciousInstanceOfGuard
        // noinspection SuspiciousInstanceOfGuard
        // noinspection SuspiciousInstanceOfGuard
        if (a instanceof Object && b instanceof Object) {
            var p_1 = Object.keys(a);
            return Object.keys(b).every(function (i) { return p_1.indexOf(i) !== -1; }) &&
                p_1.every(function (i) { return c.Eq(a[i], b[i], true); });
        }
        return false;
    };
    Kore.prototype.IsAnyString = function (any) {
        return typeof any === "string" || any instanceof String;
    };
    Kore.prototype.IsString = function (any) {
        if (!this.IsAnyString(any))
            return false;
        var s = any;
        return s.trim() !== "";
    };
    Kore.prototype.IsAnyNumber = function (any) {
        if (any == null)
            return false;
        return typeof any === "number" || any instanceof Number;
    };
    Kore.prototype.IsNumber = function (any, allowString) {
        if (allowString === void 0) { allowString = false; }
        if (this.IsAnyNumber(any)) {
            return !isNaN(any) && isFinite(any);
        }
        if (this.IsAnyString(any) && allowString) {
            var n = parseFloat(any);
            return !isNaN(n) && isFinite(n);
        }
        return false;
    };
    Kore.prototype.IsArray = function (arr) {
        return Array.isArray(arr);
    };
    Kore.prototype.IsBooleanArray = function (arr) {
        return this.I(arr, "boolean");
    };
    Kore.prototype.IsNumberArray = function (arr) {
        return this.I(arr, "number");
    };
    Kore.prototype.IsStringArray = function (arr) {
        return this.I(arr, "string");
    };
    Kore.prototype.Random = function (N) {
        var chars = this.m.Skip(34).split('');
        return [].Fill(N, function () { return chars.Random(); }).join('');
    };
    Kore.prototype.WrapArray = function (arr) {
        if (!this.IsArray(arr))
            return [arr];
        return arr;
    };
    Kore.prototype.FlattenObject = function (obj) {
        var ret = new Map();
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                ret.set(k, obj[k]);
            }
        }
        return ret;
    };
    Kore.prototype.Eq = function (a, b, deep) {
        if (deep)
            return this.DeepEqual(a, b);
        return a === b;
    };
    Kore.prototype.I = function (a, type) {
        return this.IsArray(a) && a.every(function (item) { return typeof item === type; });
    };
    /*============
     private methods
     ============*/
    //Throws exception
    Kore.prototype.t = function (s) {
        throw new Error(s);
    };
    //Locale compare
    Kore.prototype.lc = function (a, b) {
        var charA = '', charB = '', index = 0;
        var s = a.length === b.length;
        while (charA === charB && index < 100) {
            charA = (s ? a : a.toLowerCase()).charAt(index);
            charB = (s ? b : b.toLowerCase()).charAt(index);
            index++;
        }
        return (this.m.indexOf(charA) - this.m.indexOf(charB)).Clamp(-1, 1);
    };
    Kore.prototype.TC = function (a, b, type) {
        return typeof a === type && typeof b === type;
    };
    //map for mapping array in to KV Pair
    // noinspection JSMethodCanBeStatic
    Kore.prototype.M = function (e, predicate) {
        return predicate(e[0], e[1]);
    };
    //For key value pairs from tuple, for maps
    // noinspection JSMethodCanBeStatic
    // noinspection JSMethodCanBeStatic
    Kore.prototype.P = function (e) {
        return { key: e[0], value: e[1] };
    };
    //To integer
    Kore.prototype.i = function (string) {
        this.A(string);
        if (this.IsAnyString(string)) {
            return parseInt(string);
        }
        else {
            return Math.trunc(string);
        }
    };
    //To float
    Kore.prototype.f = function (string) {
        this.A(string);
        return parseFloat(string);
    };
    //Assert that its a number
    Kore.prototype.A = function (a) {
        if (!this.IsNumber(a, true))
            this.t("Invalid Number");
    };
    return Kore;
}());



/***/ }),

/***/ "./src/SortType.ts":
/*!*************************!*\
  !*** ./src/SortType.ts ***!
  \*************************/
/*! exports provided: SortType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SortType", function() { return SortType; });
var SortType = /** @class */ (function () {
    function SortType() {
    }
    SortType.Ascending = { IsNum: true };
    SortType.Descending = { IsNum: true };
    SortType.AtoZ = { IsNum: false };
    SortType.ZtoA = { IsNum: false };
    return SortType;
}());



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: Kore, SortType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Kore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Kore */ "./src/Kore.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Kore", function() { return _Kore__WEBPACK_IMPORTED_MODULE_0__["Kore"]; });

/* harmony import */ var _SortType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SortType */ "./src/SortType.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SortType", function() { return _SortType__WEBPACK_IMPORTED_MODULE_1__["SortType"]; });






/***/ })

/******/ });
});
//# sourceMappingURL=index.js.map