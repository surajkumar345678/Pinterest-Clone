{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/Kore.ts","webpack:///./src/SortType.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})((typeof window !== 'undefined' ? window : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import {Core} from \"./index\";\r\nimport {SortType} from \"./SortType\";\r\n\r\nexport class Kore implements Core {\r\n\tAssertExtend(): void {\r\n\t\tif (!this.IsExtended) this.t(\"Core needs to be extended\");\r\n\t}\r\n\t// readonly SPACE: string = \"&nbsp;\";\r\n\t// readonly LEFT_TAG: string = \"&lt;\";\r\n\t// readonly RIGHT_TAG: string = \"&gt;\";\r\n\t// readonly AMPERSAND: string = \"&amp;\";\r\n\t// readonly SINGLE_QUOTE: string = \"&#39;\";\r\n\t// readonly DOUBLE_QUOTE: string = \"&quot;\";\r\n\t\r\n\tprivate readonly m: string = ' _-,;:!?.\\'\"()[]{ }@*/\\&#%`^+<=>|~$0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ';\r\n\t\r\n\tget IsExtended() {\r\n\t\treturn Map.prototype.All != null;\r\n\t}\r\n\t\r\n\tExtendPrimitives() {\r\n\t\tlet c: Kore = this;\r\n\t\t// String.prototype.EscapeChar = function (space: boolean): string {\r\n\t\t// \tif (this.length > 1) {\r\n\t\t// \t\tc.t(\"Only can escape characters. String cannot be longer than 1\");\r\n\t\t// \t}\r\n\t\t// \tswitch (this) {\r\n\t\t// \t\tcase \"&\":\r\n\t\t// \t\t\treturn c.AMPERSAND;\r\n\t\t// \t\tcase \"<\":\r\n\t\t// \t\t\treturn c.LEFT_TAG;\r\n\t\t// \t\tcase \">\":\r\n\t\t// \t\t\treturn c.RIGHT_TAG;\r\n\t\t// \t\tcase \"'\":\r\n\t\t// \t\t\treturn c.SINGLE_QUOTE;\r\n\t\t// \t\tcase '\"':\r\n\t\t// \t\t\treturn c.DOUBLE_QUOTE;\r\n\t\t// \t\tcase \" \":\r\n\t\t// \t\t\treturn space ? c.SPACE : this;\r\n\t\t// \t\tdefault:\r\n\t\t// \t\t\treturn this;\r\n\t\t// \t}\r\n\t\t// };\r\n\t\t// String.prototype.EscapeHTML = function (space: boolean): string {\r\n\t\t// \treturn this.split('').Map((s: string) => s.EscapeChar(space)).join(\"\");\r\n\t\t// };\r\n\t\t// // String.prototype.BreakIntoArray = function (cArr: string[] = []): string[] {\r\n\t\t// // \tif (this.length === 0) return cArr;\r\n\t\t// // \tlet f: string = this.charAt(0);\r\n\t\t// // \tif (f !== \"&\") {\r\n\t\t// // \t\tcArr.push(f);\r\n\t\t// // \t\treturn this.Skip(1).BreakIntoArray(cArr);\r\n\t\t// // \t} else {\r\n\t\t// // \t\tlet ret: string = this;\r\n\t\t// // \t\tlet six = this.Take(6);\r\n\t\t// // \t\tlet five = this.Take(5);\r\n\t\t// // \t\tlet four = this.Take(4);\r\n\t\t// // \t\tif (six === c.SPACE) {\r\n\t\t// // \t\t\tcArr.push(c.SPACE);\r\n\t\t// // \t\t\tret = this.Skip(6);\r\n\t\t// // \t\t} else if (six === c.DOUBLE_QUOTE) {\r\n\t\t// // \t\t\tcArr.push(c.DOUBLE_QUOTE);\r\n\t\t// // \t\t\tret = this.Skip(6);\r\n\t\t// // \t\t} else if (five === c.AMPERSAND) {\r\n\t\t// // \t\t\tcArr.push(c.AMPERSAND);\r\n\t\t// // \t\t\tret = this.Skip(5);\r\n\t\t// // \t\t} else if (five === c.SINGLE_QUOTE) {\r\n\t\t// // \t\t\tcArr.push(c.SINGLE_QUOTE);\r\n\t\t// // \t\t\tret = this.Skip(5);\r\n\t\t// // \t\t} else if (four === c.LEFT_TAG) {\r\n\t\t// // \t\t\tcArr.push(c.LEFT_TAG);\r\n\t\t// // \t\t\tret = this.Skip(4);\r\n\t\t// // \t\t} else if (four === c.RIGHT_TAG) {\r\n\t\t// // \t\t\tcArr.push(c.RIGHT_TAG);\r\n\t\t// // \t\t\tret = this.Skip(4);\r\n\t\t// // \t\t} else {\r\n\t\t// // \t\t\tcArr.push(f);\r\n\t\t// // \t\t\tret = this.Skip(1);\r\n\t\t// // \t\t}\r\n\t\t// // \t\treturn ret.BreakIntoArray(cArr);\r\n\t\t// // \t}\r\n\t\t// // };\r\n\t\t// String.prototype.WrapIn = function (tag: string): string {\r\n\t\t// \treturn `<${tag}>${this}</${tag}>`;\r\n\t\t// };\r\n\t\t// String.prototype.RemoveURLVariable = function (): string {\r\n\t\t// \tlet split: string[] = this.split('?');\r\n\t\t// \treturn split.length === 1 ? this : split.Omit(1).join('?');\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.IsFile = function (): boolean {\r\n\t\t// \treturn c.IsFile(this as string);\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.HasDir = function (): boolean {\r\n\t\t// \treturn c.fileCheck(this).split(\"/\").length > 1;\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.GetExt = function (): string {\r\n\t\t// \treturn \".\" + c.fileCheck(this).split('.').pop();\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.GetName = function (): string {\r\n\t\t// \treturn c.fileCheck(this)\r\n\t\t// \t\t.split(\".\")\r\n\t\t// \t\t.Omit(1)\r\n\t\t// \t\t.join(\".\")\r\n\t\t// \t\t.split(\"/\").pop()!;\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.GetDir = function (): string {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \tif (!path.HasDir()) return \"\";\r\n\t\t// \treturn path.split(\".\").Omit(1).join(\".\").split(\"/\").Omit(1).join(\"/\").FormatDir();\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.ReplaceExt = function (replacement: string): string {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \tif (replacement.Starts(\".\")) replacement = replacement.Skip(1);\r\n\t\t// \treturn path.GetDir().FormatDir() + (path.GetName() + \".\" + replacement).FormatFile();\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.EditExt = function (modify: (s: string) => string): string {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \treturn path.ReplaceExt(modify(path.GetExt().Skip(1)));\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.ReplaceName = function (replacement: string): string {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \tif (replacement.Starts(\"/\")) replacement = replacement.Skip(1);\r\n\t\t// \tif (replacement.Ends(\".\")) replacement = replacement.Omit(1);\r\n\t\t// \treturn (path.GetDir().FormatDir() + replacement + path.GetExt()).FormatFile();\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.EditName = function (modify: (s: string) => string): string {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \treturn path.ReplaceName(modify(path.GetName()));\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.ReplaceDir = function (replacement: string): string {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \treturn (replacement.FormatDir() + path.split(\"/\").pop()!.FormatFile()).FormatFile();\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.EditDir = function (modify: (s: string) => string): string {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \treturn path.ReplaceDir(modify(path.GetDir()));\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.FormatDir = function (): string {\r\n\t\t// \tlet path = c.parseFile(this);\r\n\t\t// \tif (!c.IsString(path)) c.t(\"directory cannot be empty\");\r\n\t\t// \tif (path.Starts(\"/\")) path = path.Skip(1);\r\n\t\t// \tif (!path.Ends(\"/\")) path += \"/\";\r\n\t\t// \treturn path;\r\n\t\t// };\r\n\t\t//\r\n\t\t// String.prototype.FormatFile = function () {\r\n\t\t// \tlet path = c.fileCheck(this);\r\n\t\t// \treturn path.Starts(\"/\") ? path.Skip(1) : path;\r\n\t\t// };\r\n\t\t\r\n\t\t\r\n\t\t/*=================\r\n\t\t strings\r\n\t\t ==================*/\r\n\t\tString.prototype.Match = function (regex: RegExp): string[] {\r\n\t\t\treturn this.match(regex) || [];\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.ReplaceAll = function (regex: string, replace: string): string {\r\n\t\t\treturn this.replace(new RegExp(regex, 'g'), replace);\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.IsEmpty = function (): boolean {\r\n\t\t\treturn this.trim().length === 0;\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Starts = function (start: string): boolean {\r\n\t\t\tif (this.IsEmpty() || start.IsEmpty()) return false;\r\n\t\t\tlet s: string = start.trim();\r\n\t\t\tlet target: string = this.trim();\r\n\t\t\treturn target.Take(s.length) === s;\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Ends = function (end: string): boolean {\r\n\t\t\tif (this.IsEmpty() || end.IsEmpty()) return false;\r\n\t\t\tlet s: string = end.trim();\r\n\t\t\tlet target: string = this.trim();\r\n\t\t\treturn target.Last(s.length) === s;\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.CharAt = function (val: number): string {\r\n\t\t\tif ((val > -1 && val >= this.length) || (val < 0 && -val > this.length)) {\r\n\t\t\t\tc.t(\"Cannot exceed length of string\");\r\n\t\t\t}\r\n\t\t\treturn this.charAt(val + (val < 0 ? this.length : 0));\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.RemoveCharAt = function (val: number): string {\r\n\t\t\tlet i = val + (val < 0 ? this.length : 0);\r\n\t\t\tif ((val > -1 && val >= this.length) || (-val >= this.length + 1 && val < 0)) {\r\n\t\t\t\tc.t(\"Cannot exceed length of string\");\r\n\t\t\t}\r\n\t\t\treturn this.Take(i) + this.Skip(i + 1);\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Remove = function (target: string): string {\r\n\t\t\treturn this.split(target).join(\"\");\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Without = function (without: string[]): string {\r\n\t\t\tlet ret: string = this;\r\n\t\t\twithout.Each((s: string) => ret = ret.Remove(s));\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Skip = function (val: number): string {\r\n\t\t\treturn this.substr(val)\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Take = function (val?: number): string {\r\n\t\t\treturn val == null ? this.length === 0 ? \"\" : this.charAt(0) : this.substr(0, val);\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Last = function (val?: number): string {\r\n\t\t\treturn val == null ? this.length === 0 ? \"\" : this.charAt(this.length - 1) : this.substr(this.length - val);\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Omit = function (val: number): string {\r\n\t\t\treturn this.substr(0, this.length - val);\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Repeat = function (val: number): string {\r\n\t\t\tif (val < 0) {\r\n\t\t\t\tc.t(\"Count cannot be negative\");\r\n\t\t\t}\r\n\t\t\treturn this.repeat(val);\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Count = function (target: string): number {\r\n\t\t\tconst regExp = new RegExp(target, \"gi\");\r\n\t\t\treturn (this.Match(regExp)).length;\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.Capitalize = function (): string {\r\n\t\t\treturn this.Take(1).toUpperCase() + this.Skip(1);\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.CapitalizeWords = function (): string {\r\n\t\t\treturn this.split(' ').Map(s => s.Capitalize()).join(' ');\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.IsAlphanumeric = function (): boolean {\r\n\t\t\tif (this.IsEmpty()) return false;\r\n\t\t\tlet ret = this.split('')\r\n\t\t\t\t.Map(c => c.charCodeAt(0))\r\n\t\t\t\t.When((code: number) => !(code > 47 && code < 58) && !(code > 64 && code < 91) && !(code > 96 && code < 123), () => false);\r\n\t\t\treturn ret == null;\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.IsHexadecimal = function (): boolean {\r\n\t\t\tif (this.IsEmpty()) return false;\r\n\t\t\tlet a = parseInt(this.toLowerCase(), 16);\r\n\t\t\treturn (a.toString(16) === this.toLowerCase());\r\n\t\t};\r\n\t\t\r\n\t\tString.prototype.LineBreak = function (): string[] {\r\n\t\t\treturn this.ReplaceAll('\\r\\n', '\\n').ReplaceAll('\\r', '\\n').split('\\n');\r\n\t\t};\r\n\t\t\r\n\t\tNumber.prototype.Odd = function (): boolean {\r\n\t\t\tif (!this.Int() || this === 0) return false;\r\n\t\t\treturn this % 2 !== 0;\r\n\t\t};\r\n\t\t\r\n\t\tNumber.prototype.Even = function (): boolean {\r\n\t\t\tif (!this.Int() || this === 0) return false;\r\n\t\t\treturn this % 2 === 0;\r\n\t\t};\r\n\t\t\r\n\t\tNumber.prototype.Int = function (): boolean {\r\n\t\t\tif (!c.IsNumber(this)) return false;\r\n\t\t\treturn Math.abs(this % 1) < 0.000000000000001;\r\n\t\t};\r\n\t\t\r\n\t\tNumber.prototype.Finite = function (): boolean {\r\n\t\t\tif (!c.IsAnyNumber(this)) return false;\r\n\t\t\treturn !this.NaN() && isFinite(this);\r\n\t\t};\r\n\t\tNumber.prototype.Infinite = function (): boolean {\r\n\t\t\tif (!c.IsAnyNumber(this)) return false;\r\n\t\t\treturn !this.NaN() && !isFinite(this);\r\n\t\t};\r\n\t\tNumber.prototype.NaN = function (): boolean {\r\n\t\t\treturn isNaN(this);\r\n\t\t};\r\n\t\tNumber.prototype.RoundOff = function (): number {\r\n\t\t\tc.A(this);\r\n\t\t\tlet m = this < 0 ? -1 : 1;\r\n\t\t\treturn m * Math.round(m * this);\r\n\t\t};\r\n\t\tNumber.prototype.Ceil = function (): number {\r\n\t\t\tc.A(this);\r\n\t\t\tlet m = this < 0 ? -1 : 1;\r\n\t\t\treturn m * Math.ceil(m * this);\r\n\t\t};\r\n\t\tNumber.prototype.Floor = function (): number {\r\n\t\t\tc.A(this);\r\n\t\t\tlet m = this < 0 ? -1 : 1;\r\n\t\t\treturn m * Math.floor(m * this);\r\n\t\t};\r\n\t\tNumber.prototype.Abs = function (): number {\r\n\t\t\tc.A(this);\r\n\t\t\treturn Math.abs(this);\r\n\t\t};\r\n\t\tNumber.prototype.Root = function (): number {\r\n\t\t\tc.A(this);\r\n\t\t\tif (this < 0) c.t(\"Can't root negative\");\r\n\t\t\treturn Math.sqrt(this);\r\n\t\t};\r\n\t\tNumber.prototype.ToInt = function (): number {\r\n\t\t\treturn c.i(this as number);\r\n\t\t};\r\n\t\tNumber.prototype.ToFloat = function (): number {\r\n\t\t\treturn c.f(this as number);\r\n\t\t};\r\n\t\tString.prototype.ToInt = function (): number {\r\n\t\t\treturn c.i(this as string);\r\n\t\t};\r\n\t\tString.prototype.ToFloat = function (): number {\r\n\t\t\treturn c.f(this as string);\r\n\t\t};\r\n\t\t\r\n\t\tNumber.prototype.AtMax = function (max: number): number {\r\n\t\t\tc.A(this);\r\n\t\t\treturn Math.min(this, max);\r\n\t\t};\r\n\t\tNumber.prototype.AtMin = function (min: number): number {\r\n\t\t\tc.A(this);\r\n\t\t\treturn Math.max(this, min);\r\n\t\t};\r\n\t\tNumber.prototype.Clamp = function (constrain1: number, constrain2: number): number {\r\n\t\t\tc.A(this);\r\n\t\t\treturn this.AtMax(constrain1.AtMin(constrain2)).AtMin(constrain1.AtMax(constrain2));\r\n\t\t};\r\n\t\t\r\n\t\tNumber.prototype.RandomTo = function (to: number, integer?: boolean): number {\r\n\t\t\tc.A(this);\r\n\t\t\tif (integer) {\r\n\t\t\t\treturn (this + Math.random() * (to - this + 1)).Floor();\r\n\t\t\t} else {\r\n\t\t\t\treturn (this + Math.random() * (to - this + 1)).AtMax(to);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tNumber.prototype.RandomFor = function (to: number, integer?: boolean): number {\r\n\t\t\treturn this.RandomTo(this + to - 1, integer);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Flatten = function <X>(): X[] {\r\n\t\t\treturn this.length === 0 ? [] : this.Reduce((a, b) => a.concat(b));\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Merge = function <T, V>(values: V[]): Map<T, V> {\r\n\t\t\tif (this.length !== values.length) throw \"Array has to be same length\";\r\n\t\t\tlet map: Map<T, V> = new Map<T, V>();\r\n\t\t\tthis.Each((e: T, i: number) => map.set(e, values[i]));\r\n\t\t\treturn map;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.AsKey = function <T, V>(valueFunction: (value: T, index: number) => V): Map<T, V> {\r\n\t\t\tlet map: Map<T, V> = new Map<T, V>();\r\n\t\t\tthis.Each((e: T, i: number) => map.set(e, valueFunction(e, i)));\r\n\t\t\treturn map;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.AsValue = function <K, T>(keyFunction: (value: T, index: number) => K): Map<K, T> {\r\n\t\t\tlet map: Map<K, T> = new Map<K, T>();\r\n\t\t\tthis.Each((e: T, i: number) => map.set(keyFunction(e, i), e));\r\n\t\t\treturn map;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.TrimAll = function (): string[] {\r\n\t\t\treturn this.Map((s: string) => s.trim());\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Sort = function (type: SortMethod, Definier: (i) => number | string) {\r\n\t\t\tlet nArr = this.slice();\r\n\t\t\tif (Definier == null) {\r\n\t\t\t\tif ((type.IsNum && !c.IsNumberArray(nArr)) || (!c.IsStringArray(nArr) && !type.IsNum)) {\r\n\t\t\t\t\tc.t(\"Please provide scoring strategy\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (Definier == null) Definier = (a => a) as any;\r\n\t\t\tlet o = (type === SortType.Ascending || type === SortType.AtoZ) ? 1 : -1;\r\n\t\t\tlet f: Function = (a, b) => (type.IsNum ? (Definier!(a) > Definier!(b) ? 1 : -1) : c.lc(Definier!(a) as string, Definier!(b) as string)) * o;\r\n\t\t\tnArr.sort(f);\r\n\t\t\treturn nArr;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Reverse = function <T>(): T[] {\r\n\t\t\tlet ret: T[] = [];\r\n\t\t\tthis.Each((e: T) => ret.push(e), true);\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Has = function <T>(target: T, deep: boolean = false): boolean {\r\n\t\t\treturn this.When((e: T) => c.Eq(e, target, deep), () => true) || false;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Where = function <T>(predicate: (e: T, i: number) => boolean): T[] {\r\n\t\t\tlet ret: T[] = [];\r\n\t\t\tthis.When(predicate, (e: T) => { ret.push(e)}, false);\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Map = function <T, X>(application: (e: T, i: number) => X): X[] {\r\n\t\t\tlet ret: X[] = [];\r\n\t\t\tthis.Each((e: T, i: number) => ret.push(application(e, i)));\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Each = function <T>(application: (e: T, i: number) => void, reverse: boolean = false): T[] {\r\n\t\t\tif (!reverse) {\r\n\t\t\t\tfor (let i = 0; i < this.length; i++) {\r\n\t\t\t\t\tapplication(this[i], i);\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tfor (let i = this.length - 1; i >= 0; i--) {\r\n\t\t\t\tapplication(this[i], i);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.RemoveValue = function <T>(target: T, deep: boolean = false): T[] {\r\n\t\t\treturn this.Where((e: T) => !c.Eq(e, target, deep));\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Without = function <T>(arr: T[], deep: boolean = false): T[] {\r\n\t\t\treturn this.Where((e: T) => !arr.Has(e, deep));\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.WithoutIndex = function <T>(w: number[]): T[] {\r\n\t\t\treturn this.Where((e: T, i: number) => !w.Has(i));\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Fill = function <T>(amt: number, fillFunction: (i: number) => T): T[] {\r\n\t\t\tlet arr = this.slice();\r\n\t\t\tfor (let i = 0; i < amt; i++) {\r\n\t\t\t\tarr.push(fillFunction(i));\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.RemoveIndex = function <T>(index: number): T[] {\r\n\t\t\treturn this.Where((e: T, i: number) => i !== index);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Take = function <T>(val?: number): T[] | T | null {\r\n\t\t\tif (val == null) {\r\n\t\t\t\tif (this.length === 0) return null;\r\n\t\t\t\treturn this[0];\r\n\t\t\t}\r\n\t\t\treturn this.slice(0, val);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.TakeWhile = function <T>(predicate: (e: T, index: number) => boolean): T[] {\r\n\t\t\tlet ret: T[] = [];\r\n\t\t\tthis.When(predicate, (e: T) => {ret.push(e)}, true);\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Skip = function <T>(val: number): T[] {\r\n\t\t\treturn this.slice(val);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.SkipWhile = function <T>(predicate: (e: T, i: number) => boolean): T[] {\r\n\t\t\tlet skip = 0;\r\n\t\t\tthis.When(predicate, () => {skip++}, true);\r\n\t\t\treturn this.Skip(skip);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Omit = function <T>(val: number): T[] {\r\n\t\t\treturn this.slice(0, -val);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.OmitWhile = function <T>(predicate: (e: T, i: number) => boolean): T[] {\r\n\t\t\tlet cut: number = 0;\r\n\t\t\tthis.Reverse().When(predicate, () => {cut++}, true);\r\n\t\t\treturn this.Omit(cut);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Last = function <T>(val?: number): T[] | T | null {\r\n\t\t\tif (val == null) {\r\n\t\t\t\tif (this.length === 0) return null;\r\n\t\t\t\treturn this[this.length - 1];\r\n\t\t\t}\r\n\t\t\tlet sv = this.length - val;\r\n\t\t\treturn this.slice(sv > 0 ? sv : 0);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.LastWhile = function <T>(predicate: (e: T, i: number) => boolean): T[] {\r\n\t\t\tlet last: number = 0;\r\n\t\t\tthis.Reverse().When(predicate, () => {last++}, true);\r\n\t\t\treturn this.Last(last);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.FirstIndexOf = function <T>(target: T, deep: boolean = false): number {\r\n\t\t\treturn this.FindIndex((e: T) => c.Eq(e, target, deep));\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Count = function <T>(target: T, deep: boolean = false): number {\r\n\t\t\treturn this.Where(s => c.Eq(s, target, deep)).length;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Indexes = function <T>(target: T, deep: boolean = false): number[] {\r\n\t\t\tlet index: number[] = [];\r\n\t\t\tthis.When((e: T) => c.Eq(e, target, deep), (e: T, i: number) => {index.push(i)});\r\n\t\t\treturn index;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Unique = function <T>(deep: boolean = false): T[] {\r\n\t\t\t\r\n\t\t\treturn this.Where((e: T, i: number) => this.FirstIndexOf(e, deep) === i);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Union = function <T>(arr: T[], deep: boolean = false): T[] {\r\n\t\t\treturn this.concat(arr).Unique(deep);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Intersect = function <T>(arr: T[], deep: boolean = false): T[] {\r\n\t\t\treturn this.Unique(deep).Where(e => arr.Has(e, deep));\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Outer = function <T>(ar: T[], deep: boolean = false): T[] {\r\n\t\t\treturn this.Union(ar, deep).Without(this.Intersect(ar, deep), deep);\r\n\t\t};\r\n\t\t\r\n\t\t// noinspection JSUnusedLocalSymbols\r\n\t\tArray.prototype.Max = function <T>(f: (t: T, i: number) => number = (t: T, i: number) => t as any as number): T {\r\n\t\t\treturn this.Reverse()\r\n\t\t\t\t.Reduce((a: T, b: T, i: number) => {\r\n\t\t\t\t\treturn f(a, i - 1) > f(b, i) ? a : b\r\n\t\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\t// noinspection JSUnusedLocalSymbols\r\n\t\tArray.prototype.Min = function <T>(f: (t: T, i: number) => number = (t: T, i: number) => t as any as number): T {\r\n\t\t\treturn this.Reverse()\r\n\t\t\t\t.Reduce((a: T, b: T, i: number) => {\r\n\t\t\t\t\treturn f(a, i - 1) < f(b, i) ? a : b\r\n\t\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Sum = function <T>(f: (t: T, i: number) => number = (t) => t as any as number): number {\r\n\t\t\treturn this.Map((e: T, i: number) => f(e, i))\r\n\t\t\t\t.Reduce((a: number, b: number) => a + b);\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Reduce = function <T>(r: (a: T, b: T, i: number) => T): T {\r\n\t\t\tif (this.length === 0) c.t(\"Empty Array\");\r\n\t\t\tif (this.length === 1) return this[0];\r\n\t\t\tlet ret: T = this[0];\r\n\t\t\tfor (let i = 1; i < this.length; i++) {\r\n\t\t\t\tret = r(ret as T, this[i], i - 1);\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Find = function <T>(predicate: (e: T, i: number) => boolean): T | null {\r\n\t\t\tlet ret = this.When(predicate, (e: T) => e);\r\n\t\t\treturn ret == null ? null : ret;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.FindIndex = function <T>(predicate: (e: T, i: number) => boolean): number | null {\r\n\t\t\tlet ret = this.When(predicate, (e: T, i: number) => i);\r\n\t\t\treturn ret == null ? null : ret;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Any = function <T>(predicate: (e: T, i: number) => boolean): boolean {\r\n\t\t\treturn this.When(predicate, () => true) || false;\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.All = function <T>(predicate: (e: T, i: number) => boolean): boolean {\r\n\t\t\treturn !this.Any((e: T, i: number) => !predicate(e, i));\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.When = function <T>(predicate: (e: T, i: number) => boolean, ifTrue: (e: T, i: number) => any, breakWhenFalse: boolean = false): any {\r\n\t\t\tfor (let i = 0; i < this.length; i++) {\r\n\t\t\t\tif (predicate(this[i], i)) {\r\n\t\t\t\t\tlet ret: any = ifTrue(this[i], i);\r\n\t\t\t\t\tif (typeof ret !== \"undefined\") {\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (breakWhenFalse) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tArray.prototype.Random = function <T>(): T | null {\r\n\t\t\tif (this.length === 0) return null;\r\n\t\t\tif (this.length === 1) return this[0];\r\n\t\t\treturn this[(0).RandomFor(this.length, true)];\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tMap.prototype.TrimValue = function <K>(): Map<K, string> {\r\n\t\t\treturn this.MapValue(v => v.trim());\r\n\t\t};\r\n\t\t\r\n\t\tMap.prototype.SortByKey = function <K, V>(type: SortMethod, Definer?: (k: K) => number | string): Map<K, V> {\r\n\t\t\tlet arr: [K, V][] = this.Arr();\r\n\t\t\tarr = arr.Sort(type, Definer == null ? e => e[0] : e => Definer(e[0]) as any);\r\n\t\t\treturn new Map(arr);\r\n\t\t};\r\n\t\t\r\n\t\tMap.prototype.SortByValue = function <K, V>(type: SortMethod, Definer?: (v: V) => number | string): Map<K, V> {\r\n\t\t\tlet arr: [K, V][] = this.Arr();\r\n\t\t\tarr = arr.Sort(type, Definer == null ? e => e[1] : e => Definer(e[1]) as any);\r\n\t\t\treturn new Map(arr);\r\n\t\t};\r\n\t\t\r\n\t\tMap.prototype.Reverse = function <K, V>(): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().Reverse());\r\n\t\t};\r\n\t\t\r\n\t\tMap.prototype.HasKey = function <K, V>(search: K, deep?: boolean): boolean {\r\n\t\t\treturn this.Keys().Has(search, deep);\r\n\t\t};\r\n\t\t\r\n\t\tMap.prototype.HasValue = function <K, V>(search: V, deep?: boolean): boolean {\r\n\t\t\treturn this.Values().Has(search, deep);\r\n\t\t};\r\n\t\t\r\n\t\tMap.prototype.Where = function <K, V>(predicate: (k: K, v: V) => boolean): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().Where(e => c.M(e, predicate)));\r\n\t\t};\r\n\t\t\r\n\t\tMap.prototype.MapKey = function <K, V, T>(transform: (k: K, v: V) => T): Map<T, V> {\r\n\t\t\tlet ret: Map<T, V> = new Map();\r\n\t\t\tthis.Each((k: K, v: V) => ret.set(transform(k, v), v));\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\tMap.prototype.MapValue = function <K, V, T>(transform: (v: V, k: K) => T): Map<K, T> {\r\n\t\t\tlet ret: Map<K, T> = new Map();\r\n\t\t\tthis.Each((k: K, v: V) => ret.set(k, transform(v, k)));\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\tMap.prototype.Map = function <K, V, T>(transform: (k: K, v: V) => T): T[] {\r\n\t\t\tlet ret: T[] = [];\r\n\t\t\tthis.Each((k: K, v: V) => ret.push(transform(k, v)));\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\tMap.prototype.Each = function <K, V>(transform: (k: K, v: V) => void): Map<K, V> {\r\n\t\t\tlet ret: Map<K, V> = new Map();\r\n\t\t\tthis.Arr().Each((e: [K, V]) => {\r\n\t\t\t\ttransform(e[0], e[1]);\r\n\t\t\t\tret.set(e[0], e[1]);\r\n\t\t\t});\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\tMap.prototype.RemoveKey = function <K, V>(key: K, deep: boolean = false): Map<K, V> {\r\n\t\t\treturn this.Where(k => !c.Eq(key, k, deep));\r\n\t\t};\r\n\t\tMap.prototype.RemoveValue = function <K, V>(val: V, deep: boolean = false): Map<K, V> {\r\n\t\t\treturn this.Where((k, v) => !c.Eq(v, val, deep));\r\n\t\t};\r\n\t\tMap.prototype.Without = function <K, V>(keys: K[], values: V[], deep: boolean = false): Map<K, V> {\r\n\t\t\treturn this.Where((k, v) => !keys.Has(k, deep) && !values.Has(v, deep));\r\n\t\t};\r\n\t\tMap.prototype.Take = function <K, V>(val?: number): any {\r\n\t\t\tif (val == null) {\r\n\t\t\t\tlet l = this.Arr().Take();\r\n\t\t\t\treturn l == null ? null : c.P(l);\r\n\t\t\t}\r\n\t\t\treturn new Map(this.Arr().Take(val));\r\n\t\t};\r\n\t\tMap.prototype.TakeWhile = function <K, V>(predicate: (k: K, v: V) => boolean): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().TakeWhile(e => c.M(e, predicate)));\r\n\t\t};\r\n\t\tMap.prototype.Skip = function <K, V>(val: number): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().Skip(val));\r\n\t\t};\r\n\t\tMap.prototype.SkipWhile = function <K, V>(predicate: (k: K, v: V) => boolean): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().SkipWhile(e => c.M(e, predicate)));\r\n\t\t};\r\n\t\tMap.prototype.Omit = function <K, V>(val: number): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().Omit(val));\r\n\t\t};\r\n\t\tMap.prototype.OmitWhile = function <K, V>(predicate: (k: K, v: V) => boolean): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().OmitWhile(e => c.M(e, predicate)));\r\n\t\t};\r\n\t\tMap.prototype.Last = function <K, V>(val?: number): any {\r\n\t\t\tif (val == null) {\r\n\t\t\t\tlet l = this.Arr().Last();\r\n\t\t\t\treturn l == null ? null : c.P(l);\r\n\t\t\t}\r\n\t\t\treturn new Map(this.Arr().Last(val));\r\n\t\t};\r\n\t\tMap.prototype.LastWhile = function <K, V>(predicate: (k: K, v: V) => boolean): Map<K, V> {\r\n\t\t\treturn new Map(this.Arr().LastWhile(e => c.M(e, predicate)));\r\n\t\t};\r\n\t\tMap.prototype.Arr = function <K, V>(): [K, V][] {\r\n\t\t\treturn Array.from(this.entries());\r\n\t\t};\r\n\t\tMap.prototype.Keys = function <K, V>(): K[] {\r\n\t\t\treturn Array.from(this.keys());\r\n\t\t};\r\n\t\tMap.prototype.Values = function <K, V>(): V[] {\r\n\t\t\treturn Array.from(this.values());\r\n\t\t};\r\n\t\tMap.prototype.AsObject = function <K>(key: (k: K) => string = (k: K) => k.toString()): object {\r\n\t\t\tlet ret: any = {};\r\n\t\t\tthis.MapKey(key).Each((k, v) => ret[k] = v);\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\tMap.prototype.Find = function <K, V>(predicate: (k: K, v: V) => boolean): { key: K, value: V } | null {\r\n\t\t\tlet pair: [K, V] | null = this.Arr().Find(e => c.M(e, predicate));\r\n\t\t\tif (pair == null) return null;\r\n\t\t\treturn c.P(pair);\r\n\t\t};\r\n\t\tMap.prototype.Max = function <K, V>(f: (k: K, v: V) => number): { key: K, value: V } {\r\n\t\t\treturn c.P(this.Arr().Max(e => f(e[0], e[1])));\r\n\t\t};\r\n\t\tMap.prototype.Min = function <K, V>(f: (k: K, v: V) => number): { key: K, value: V } {\r\n\t\t\treturn c.P(this.Arr().Min(e => f(e[0], e[1])));\r\n\t\t};\r\n\t\tMap.prototype.Sum = function <K, V>(f: (k: K, v: V) => number): number {\r\n\t\t\treturn this.Arr().Sum(e => f(e[0], e[1]));\r\n\t\t};\r\n\t\tMap.prototype.Reduce = function <K, V>(r: (aV: { key: K, value: V }, bV: { key: K, value: V }) => { key: K, value: V }): { key: K, value: V } {\r\n\t\t\treturn this.Arr().Map(e => c.P(e)).Reduce(r);\r\n\t\t};\r\n\t\tMap.prototype.Any = function <K, V>(predicate: (k: K, v: V) => boolean): boolean {\r\n\t\t\treturn this.Arr().Any(e => c.M(e, predicate));\r\n\t\t};\r\n\t\tMap.prototype.All = function <K, V>(predicate: (k: K, v: V) => boolean): boolean {\r\n\t\t\treturn this.Arr().All(e => c.M(e, predicate));\r\n\t\t}\r\n\t}\r\n\t\r\n\tDeepEqual(a: any, b: any): boolean {\r\n\t\tlet c = this;\r\n\t\tif (a === b) return true;\r\n\t\tif (typeof a === \"undefined\" || typeof b === \"undefined\") return false;\r\n\t\tif (a === null || b === null) return false;\r\n\t\tif (typeof a !== typeof b) return false;\r\n\t\tif (c.TC(a, b, \"string\")) return String(a) === String(b);\r\n\t\tif (c.TC(a, b, \"number\")) return isNaN(a) ? isNaN(b) : a === b;\r\n\t\tif (c.TC(a, b, \"boolean\")) return a === b;\r\n\t\tif (a instanceof Date) {\r\n\t\t\treturn a.valueOf() === b.valueOf();\r\n\t\t}\r\n\t\t\r\n\t\tif (a.constructor !== b.constructor) return false;\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif (a instanceof Function || a instanceof RegExp) return a.toString() === b.toString();\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif (this.IsArray(a)) {\r\n\t\t\tif (!this.IsArray(b)) return false;\r\n\t\t\tif (a.length !== b.length) return false;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif (a instanceof Object && b instanceof Object) {\r\n\t\t\tconst p = Object.keys(a);\r\n\t\t\treturn Object.keys(b).every((i) => { return p.indexOf(i) !== -1; }) &&\r\n\t\t\t\tp.every(function (i) { return c.Eq(a[i], b[i], true); });\r\n\t\t}\r\n\t\treturn false;\r\n\t\t\r\n\t}\r\n\t\r\n\tIsAnyString(any: any): boolean {\r\n\t\treturn typeof any === \"string\" || any instanceof String;\r\n\t}\r\n\t\r\n\tIsString(any: any): boolean {\r\n\t\tif (!this.IsAnyString(any)) return false;\r\n\t\tlet s: string = any;\r\n\t\treturn s.trim() !== \"\";\r\n\t}\r\n\t\r\n\tIsAnyNumber(any: any): boolean {\r\n\t\tif (any == null) return false;\r\n\t\treturn typeof any === \"number\" || any instanceof Number;\r\n\t}\r\n\t\r\n\tIsNumber(any: any, allowString: boolean = false): boolean {\r\n\t\tif (this.IsAnyNumber(any)) {\r\n\t\t\treturn !isNaN(any as number) && isFinite(any as number);\r\n\t\t}\r\n\t\tif (this.IsAnyString(any) && allowString) {\r\n\t\t\tlet n: number = parseFloat(any as string);\r\n\t\t\treturn !isNaN(n) && isFinite(n);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tIsArray(arr: any): boolean {\r\n\t\treturn Array.isArray(arr);\r\n\t}\r\n\t\r\n\tIsBooleanArray(arr: any[]): arr is boolean[] {\r\n\t\treturn this.I(arr, \"boolean\");\r\n\t}\r\n\t\r\n\tIsNumberArray(arr: any[]): arr is number[] {\r\n\t\treturn this.I(arr, \"number\");\r\n\t}\r\n\t\r\n\tIsStringArray(arr: any[]): arr is string[] {\r\n\t\treturn this.I(arr, \"string\");\r\n\t}\r\n\t\r\n\tRandom(N: number): string {\r\n\t\tlet chars: string[] = this.m.Skip(34).split('');\r\n\t\treturn [].Fill<string>(N, () => chars.Random()!).join('');\r\n\t}\r\n\t\r\n\tWrapArray<T>(arr: T[] | T): T[] {\r\n\t\tif (!this.IsArray(arr)) return [arr as T];\r\n\t\treturn arr as T[];\r\n\t}\r\n\t\r\n\tFlattenObject(obj: object): Map<string, any> {\r\n\t\tlet ret: Map<string, any> = new Map();\r\n\t\tfor (let k in obj) {\r\n\t\t\tif (obj.hasOwnProperty(k)) {\r\n\t\t\t\tret.set(k, obj[k]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\tEq(a: any, b: any, deep: boolean): boolean {\r\n\t\tif (deep) return this.DeepEqual(a, b);\r\n\t\treturn a === b;\r\n\t}\r\n\t\r\n\tprivate I(a: any[], type: string) {\r\n\t\treturn this.IsArray(a) && a.every(item => typeof item === type);\r\n\t}\r\n\t\r\n\t\r\n\t/*============\r\n\t private methods\r\n\t ============*/\r\n\t\r\n\t//Throws exception\r\n\tprivate t(s: string): void {\r\n\t\tthrow new Error(s);\r\n\t}\r\n\t\r\n\t//Locale compare\r\n\tprivate lc(a: string, b: string) {\r\n\t\tlet charA: string = '', charB: string = '', index = 0;\r\n\t\tlet s: boolean = a.length === b.length;\r\n\t\twhile (charA === charB && index < 100) {\r\n\t\t\tcharA = (s ? a : a.toLowerCase()).charAt(index);\r\n\t\t\tcharB = (s ? b : b.toLowerCase()).charAt(index);\r\n\t\t\tindex++;\r\n\t\t}\r\n\t\treturn (this.m.indexOf(charA) - this.m.indexOf(charB)).Clamp(-1, 1);\r\n\t}\r\n\t\r\n\tprivate TC(a: any, b: any, type: string) {\r\n\t\treturn typeof a === type && typeof b === type;\r\n\t}\r\n\t\r\n\t//map for mapping array in to KV Pair\r\n\t// noinspection JSMethodCanBeStatic\r\n\tprivate M<K, V>(e: [K, V], predicate: (k: K, v: V) => boolean): boolean {\r\n\t\treturn predicate(e[0], e[1]);\r\n\t}\r\n\t\r\n\t//For key value pairs from tuple, for maps\r\n\t// noinspection JSMethodCanBeStatic\r\n\t// noinspection JSMethodCanBeStatic\r\n\tprivate P<K, V>(e: [K, V]): { key: K, value: V } {\r\n\t\treturn {key: e[0], value: e[1]}\r\n\t}\r\n\t\r\n\t\r\n\t//To integer\r\n\tprivate i(string: string | number): number {\r\n\t\tthis.A(string);\r\n\t\tif (this.IsAnyString(string)) {\r\n\t\t\treturn parseInt(string as string);\r\n\t\t} else {\r\n\t\t\treturn Math.trunc(string as number);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//To float\r\n\tprivate f(string: string | number): number {\r\n\t\tthis.A(string);\r\n\t\treturn parseFloat(string as string);\r\n\t\t\r\n\t}\r\n\t\r\n\t//Assert that its a number\r\n\tprivate A(a: any) {\r\n\t\tif (!this.IsNumber(a, true)) this.t(\"Invalid Number\");\r\n\t}\r\n\t\r\n\t// private fileCheck(path: any): string {\r\n\t// \tif (!this.IsFile(path)) this.t(\"Invalid path: \" + path);\r\n\t// \treturn this.parseFile(path);\r\n\t// }\r\n\t//\r\n\t// // noinspection JSMethodCanBeStatic\r\n\t// private parseFile(path: string): string {\r\n\t// \treturn path.ReplaceAll(\"\\\\\\\\\", \"/\");\r\n\t// }\r\n\t//\r\n\t// private IsFile(path: any): boolean {\r\n\t// \tif (!this.IsString(path)) return false;\r\n\t// \tlet s: string = this.parseFile(path as string);\r\n\t// \tif (s.Starts(\".\")) return true;\r\n\t// \treturn s.split('.').length > 1;\r\n\t// }\r\n\t\r\n}\r\n\r\n","export class SortType {\r\n\tstatic Ascending: SortMethod = {IsNum: true};\r\n\tstatic Descending: SortMethod = {IsNum: true};\r\n\tstatic AtoZ: SortMethod = {IsNum: false};\r\n\tstatic ZtoA: SortMethod = {IsNum: false};\r\n}\r\n","import {Kore} from \"./Kore\";\r\nimport {SortType} from \"./SortType\";\r\n\r\ndeclare global {\r\n\tinterface String {\r\n\t\t\r\n\t\t// /**\r\n\t\t//  * Whether it has an extesion. \".txt\", \"abc/te.html\" are files but \"dockerfile\" is not\r\n\t\t//  * */\r\n\t\t// IsFile(): boolean;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Whether file string contains a directory\r\n\t\t//  * */\r\n\t\t// HasDir(): boolean;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Gets the extension from the file string\r\n\t\t//  * */\r\n\t\t// GetExt(): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Gets the file name from the file string.\r\n\t\t//  * Returns empty string if there is no file name\r\n\t\t//  * */\r\n\t\t// GetName(): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Gets the directory from the file string.\r\n\t\t//  * Returns empty string if there is no file name\r\n\t\t//  * */\r\n\t\t// GetDir(): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Replace the extension with the replacement string\r\n\t\t//  * @param replacement extension to replace with\r\n\t\t//  */\r\n\t\t// ReplaceExt(replacement: string): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Modify the extension with rules defined by the modify function\r\n\t\t//  * @param modify the rule for modifying the extension.\r\n\t\t//  * Must take in a string and return a string.\r\n\t\t//  * The string taken in is the old string\r\n\t\t//  */\r\n\t\t// EditExt(modify: (s: string) => string): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Replace the name with the provided replacement string\r\n\t\t//  * @param replacement new name to be replaced\r\n\t\t//  */\r\n\t\t// ReplaceName(replacement: string): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Modfiy the name with rules defined by the modify function\r\n\t\t//  * @param modify the rule for modifying the file name.\r\n\t\t//  * Must take in a string and return a string.\r\n\t\t//  * The input argument i the old string\r\n\t\t//  */\r\n\t\t// EditName(modify: (s: string) => string): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Replace the directory with the replacement string\r\n\t\t//  * @param replacement the string to replace the current directory with\r\n\t\t//  */\r\n\t\t// ReplaceDir(replacement: string): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Modify the name with rules defined by the modify function\r\n\t\t//  * @param modify the rule for modifiny the diretory\r\n\t\t//  * Must take in a string and return a string.\r\n\t\t//  * The input argument is the old string\r\n\t\t//  */\r\n\t\t// EditDir(modify: (s: string) => string): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Formats the string as directory. Ends with \"/\" and does not start with \"/\"\r\n\t\t//  * */\r\n\t\t// FormatDir(): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Formats the string as a file. Ensures it does not start with \"/\"\r\n\t\t//  * */\r\n\t\t// FormatFile(): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns an array of expressions that matches the regular expression\r\n\t\t * @param regex the regex to match\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tMatch(regex: RegExp): string[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Replaces the regex search with desired replacement\r\n\t\t * @param regex search\r\n\t\t * @param replace replacement\r\n\t\t */\r\n\t\tReplaceAll(regex: string, replace: string): string;\r\n\t\t\r\n\t\t/**Whether the string is \"\" or when trimmed becomes \"\" */\r\n\t\tIsEmpty(): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if the string starts with the certain string.\r\n\t\t * Ignores starting spaces.\r\n\t\t * @param start what the string is starting with\r\n\t\t */\r\n\t\tStarts(start: string): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if the string end with the certain string.\r\n\t\t * Ignores starting spaces.\r\n\t\t * @param end what the string is ending with\r\n\t\t */\r\n\t\tEnds(end: string): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the character at the position. Negative numbers will count from the back\r\n\t\t * @param val position\r\n\t\t */\r\n\t\tCharAt(val: number): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove character at the position\r\n\t\t * Negative number will count from the back\r\n\t\t * @param index position\r\n\t\t */\r\n\t\tRemoveCharAt(index: number): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove all occurrences of the search\r\n\t\t * @param rmv search\r\n\t\t */\r\n\t\tRemove(rmv: string): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove all occurrences of each element in the array\r\n\t\t * @param rmv the strings to remove\r\n\t\t */\r\n\t\tWithout(rmv: string[]): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Skip the first X characters\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tSkip(val: number): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns first character of the string. Returns empty string is string is empty\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tTake(): string\r\n\t\t\r\n\t\t/**\r\n\t\t * Take the first x characters\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tTake(val: number): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns last character of the string. Returns empty string is string is empty\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tLast(): string\r\n\t\t\r\n\t\t/**\r\n\t\t * Take the last x characters\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tLast(val: number): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove the last x characters\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tOmit(val: number): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Repeat the string x amount of time\r\n\t\t * @param val\r\n\t\t */\r\n\t\tRepeat(val: number): string;\r\n\t\t\r\n\t\t/**\r\n\t\t * Count the number of occurrence of the search target\r\n\t\t * @param target search target\r\n\t\t */\r\n\t\tCount(target: string): number;\r\n\t\t\r\n\t\t/**Convert the first character to uppercase, if possible */\r\n\t\tCapitalize(): string;\r\n\t\t\r\n\t\t/**Convert each word's first character to uppercase, if possible */\r\n\t\tCapitalizeWords(): string;\r\n\t\t\r\n\t\t/**Check if string is alphanumeric */\r\n\t\tIsAlphanumeric(): boolean;\r\n\t\t\r\n\t\t/**Check if string is hexadecimal */\r\n\t\tIsHexadecimal(): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Unify lines break to \\n and break them into array\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tLineBreak(): string[];\r\n\t\t\r\n\t\t/**Converts to number as integer */\r\n\t\tToInt(): number;\r\n\t\t\r\n\t\t/**Converts to number as float */\r\n\t\tToFloat(): number;\r\n\t\t\r\n\t\t// /**\r\n\t\t//  * Escape the input character if it is escape-able\r\n\t\t//  * @param space whether to escape space\r\n\t\t//  */\r\n\t\t// EscapeChar(space: boolean): string;\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Escape all HTML character\r\n\t\t//  * @param space whether to escape space\r\n\t\t//  */\r\n\t\t// EscapeHTML(space: boolean): string;\r\n\t\t//\r\n\t\t// // /**Break a HTML Escaped string to character arrays */\r\n\t\t// // BreakIntoArray(arr?: string[]): string[];\r\n\t\t//\r\n\t\t// /**\r\n\t\t//  * Wrap text in HTML tag\r\n\t\t//  * @param tag tag to wrap in\r\n\t\t//  */\r\n\t\t// WrapIn(tag: string): string;\r\n\t\t//\r\n\t\t// /**Remove anything after ? for a link */\r\n\t\t// RemoveURLVariable(): string;\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tinterface Array<T> {\r\n\t\t\r\n\t\t/**\r\n\t\t * Flattens the first tier of array\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tFlatten<X>(): Array<X>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Merges two array as a Map.\r\n\t\t * @param values the values to map to for each key\r\n\t\t */\r\n\t\tMerge<V>(values: V[]): Map<T, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Execute a function on the current array to generate output for each element.\r\n\t\t * The output is then used as the value used to make the map\r\n\t\t * @param valueFunction function to convert each element to value element\r\n\t\t */\r\n\t\tAsKey<V>(valueFunction: (value: T, index: number) => V): Map<T, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Executes a function on the current array to generate out for each element\r\n\t\t * The output is then used as the key used to make the ap\r\n\t\t * @param keyFunction function to convert each element to key element\r\n\t\t */\r\n\t\tAsValue<K>(keyFunction: (value: T, index: number) => K): Map<K, T>;\r\n\t\t\r\n\t\t/**Trim every string in the array */\r\n\t\tTrimAll(): string[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Sorts the array\r\n\t\t * @param type type of sorting\r\n\t\t * @param Definier for objects, the function that converts the object to either a string or number to be used for sorting\r\n\t\t */\r\n\t\tSort(type: SortMethod, Definier?: (e: T) => (number | string)): T[];\r\n\t\t\r\n\t\t/**Reverses the order of the array */\r\n\t\tReverse(): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if the array has the element.\r\n\t\t * @param search element to search for\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tHas(search: T, deep?: boolean): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove elements that do not fulfil the criteria\r\n\t\t * Stateless operation.\r\n\t\t * @param predicate criteria to fulfil\r\n\t\t */\r\n\t\tWhere(predicate: (e: T, i: number) => boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Transform or modify the array by apply the function on each element\r\n\t\t * Stateless operation\r\n\t\t * @param application transformation or modification rule\r\n\t\t */\r\n\t\tMap<X>(application: (e: T, i: number) => X): X[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Execute the application function for every element in the array, and return the current element.\r\n\t\t * Transform the array with side effect\r\n\t\t * @param application application function\r\n\t\t * @param reverse iterate in reverse order. default false\r\n\t\t */\r\n\t\tEach(application: (e: T, i: number) => void, reverse?: boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes all occurence target element from the array\r\n\t\t * Stateless operation\r\n\t\t * @param target the element to be removed\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tRemoveValue(target: T, deep?: boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes all elements within the target array from this array.\r\n\t\t * Stateless operation\r\n\t\t * @param w - target array of elements to remove from the array.\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tWithout(w: T[], deep?: boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes all the index that is the number array\r\n\t\t * Stateless operation\r\n\t\t * @param w index of elements to be removed\r\n\t\t */\r\n\t\tWithoutIndex(w: number[]): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Fill a set amount of items in the array using the function to produce object base on index\r\n\t\t * @param amount the number of elements to create\r\n\t\t * @param fillFunction the function to convert index into objects\r\n\t\t */\r\n\t\tFill<T>(amount: number, fillFunction: (i: number) => T): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove a specific index of element from the array\r\n\t\t * stateless oepration\r\n\t\t * @param index index of element to remove\r\n\t\t */\r\n\t\tRemoveIndex(index: number): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Takes the first element of the array.\r\n\t\t * Returns null if array is empty\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tTake(): T | null\r\n\t\t\r\n\t\t/**\r\n\t\t * Take the first X element from the array\r\n\t\t * Stateless operation\r\n\t\t * @param val the number of elements to take\r\n\t\t */\r\n\t\tTake(val: number): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Take while the predicate is true\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tTakeWhile(predicate: (e: T, i: number) => boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove the first X element from the array\r\n\t\t * Stateless Operation\r\n\t\t * @param val - the number of element to remove\r\n\t\t */\r\n\t\tSkip(val: number): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Skip the element while it fulfils the predicate is true\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tSkipWhile(predicate: (e: T, i: number) => boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Removes the last X element from the array\r\n\t\t * Stateless Operation\r\n\t\t * @param val\r\n\t\t */\r\n\t\tOmit(val: number): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Omit the element while the predicate is true\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tOmitWhile(predicate: (e: T, i: number) => boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the last element of the array. Returns null if array is empty\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tLast(): T | null\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the array with the last X elements\r\n\t\t * Stateleess Operation\r\n\t\t * @param val\r\n\t\t */\r\n\t\tLast(val: number): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Take the last Element while the predicate is true\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tLastWhile(predicate: (e: T, i: number) => boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Gets the first index that matches the search target\r\n\t\t * Returns null if no target matches the target\r\n\t\t * @param search the search target\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tFirstIndexOf(search: T, deep?: boolean): number | null;\r\n\t\t\r\n\t\t/**\r\n\t\t * Count the number of elements that matches the search\r\n\t\t * @param search the search target\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tCount(search: T, deep?: boolean): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Gets an array of indexes that returns elements that match the search target\r\n\t\t * @param search the search target\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tIndexes(search: T, deep?: boolean): number[];\r\n\t\t\r\n\t\t/**Remove duplicate elements that have the same pointer (strict equality)\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t * */\r\n\t\tUnique(deep?: boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Merges the two array, removing dulpicate values that have same pointer\r\n\t\t * Uses strict eqaulity (pointer check)\r\n\t\t * Stateless operation\r\n\t\t * @param target\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tUnion(target: T[], deep?: boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Generates an array that contains elements that both array has.\r\n\t\t * Uses strict equality (pointer check)\r\n\t\t * @param target\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tIntersect(target: T[], deep?: boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Generates an array that contains the merge of elements that are exclusive to both arrays\r\n\t\t * Uses strict check (pointer check)\r\n\t\t * @param target\r\n\t\t * @param deep whether to use deep equality or strict equality (default is strict)\r\n\t\t */\r\n\t\tOuter(target: T[], deep?: boolean): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Find the target with the largest score\r\n\t\t * @param f scoring algorithm\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tMax(f?: (t: T, i: number) => number): T;\r\n\t\t\r\n\t\t/**\r\n\t\t * @param f scoring algorithm\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tMin(f?: (t: T, i: number) => number): T;\r\n\t\t\r\n\t\t/**\r\n\t\t * Sums the score of the array using strategy\r\n\t\t * @param f strategy\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tSum(f?: (t: T, i: number) => number): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Reduces the array by performing the reducing function on 2 neighbouring element continuously\r\n\t\t * @param r reducing algorithm\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tReduce(r: (a: T, b: T, i: number) => T): T\r\n\t\t\r\n\t\t/**\r\n\t\t * Gets the first element that fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tFind(predicate: (e: T, i: number) => boolean): T | null;\r\n\t\t\r\n\t\t/**\r\n\t\t * Gets the index of the first element that fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tFindIndex(predicate: (e: T, i: number) => boolean): number | null;\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if at least one of the element fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tAny(predicate: (e: T, i: number) => boolean): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if all the element fulfills the predicate\r\n\t\t * @param predicate\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tAll(predicate: (e: T, i: number) => boolean): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Execute function when the predicate is true.\r\n\t\t * if ifTrue function returns value, the function will return value.\r\n\t\t * if all fails, return undefined\r\n\t\t * @param predicate condition\r\n\t\t * @param ifTrue function to execute when true. Will yield return if return is not undefined\r\n\t\t * @param breakWhenFalse whether to break when false\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tWhen(predicate: (e: T, i: number) => boolean, ifTrue: (e: T, i: number) => any, breakWhenFalse?: boolean): any\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns random element array of element\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tRandom(): T | null;\r\n\t\t\r\n\t}\r\n\t\r\n\tinterface Map<K, V> {\r\n\t\t\r\n\t\t/**\r\n\t\t * Delegate\r\n\t\t * @param method name to delegate to array\r\n\t\t * @param arg args to delegate\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tD(method: string, ...arg: any[]): Map<K, V>;\r\n\t\t\r\n\t\t/**Trim all string values of the map */\r\n\t\tTrimValue(): Map<K, string>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Sort the map by key\r\n\t\t * @param type type of sorting\r\n\t\t * @param Definer Conversion function to convert object to representive strings or number to be used for sorting\r\n\t\t */\r\n\t\tSortByKey(type: SortMethod, Definer?: (k: K) => (number | string)): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Sort the map by value\r\n\t\t * @param type type of sorting\r\n\t\t * @param Definer Coversion function to convert object to represntive strings or number to be used for sorting\r\n\t\t */\r\n\t\tSortByValue(type: SortMethod, Definer?: (i: V) => (number | string)): Map<K, V>;\r\n\t\t\r\n\t\t/**Reverse the order of the map */\r\n\t\tReverse(): Map<K, V>\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if the map has the key\r\n\t\t * @param search the target to search for\r\n\t\t * @param deep whether to use deep or strict check (def is strict)\r\n\t\t */\r\n\t\tHasKey(search: K, deep?: boolean): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if the map has the value\r\n\t\t * @param search search target\r\n\t\t * @param deep whether to use deep or strict check (def is strict)\r\n\t\t */\r\n\t\tHasValue(search: V, deep?: boolean): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Filter the map using a predicate function\r\n\t\t * @param predicate the function to decide whether the entry should remain. K for current key, V for current value\r\n\t\t */\r\n\t\tWhere(predicate: (k: K, v: V) => boolean): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Maps or modify the key base on transformation/mapping function\r\n\t\t * @param transform the function to apply on each element\r\n\t\t */\r\n\t\tMapKey<T>(transform: (k: K, v: V) => T): Map<T, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Maps or modify the value base on transformation/mapping function\r\n\t\t * @param transform the function to apply on each element\r\n\t\t */\r\n\t\tMapValue<T>(transform: (v: V, k: K) => T): Map<K, T>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Maps the map into an array base on mapping/transformation function\r\n\t\t * @param transform the function to apply on each entry\r\n\t\t */\r\n\t\tMap<T>(transform: (k: K, v: V) => T): T[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Maps the map into a new map base on side-effect transform function\r\n\t\t * @param transform the function toapply on each entry\r\n\t\t */\r\n\t\tEach(transform: (k: K, v: V) => void): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove the provided key\r\n\t\t * @param key entry to remove with key\r\n\t\t * @param deep whether to use deep or strict check (def is strict)\r\n\t\t */\r\n\t\tRemoveKey(key: K, deep?: boolean): Map<K, V>\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove the provided value\r\n\t\t * @param val entry to remove with val\r\n\t\t * @param deep whether to use deep or strict check (def is strict)\r\n\t\t */\r\n\t\tRemoveValue(val: V, deep?: boolean): Map<K, V>\r\n\t\t\r\n\t\t/**\r\n\t\t * Return a map without the specified keys and values\r\n\t\t * @param keys keys to be removed\r\n\t\t * @param values values to be removed\r\n\t\t * @param deep whether to use deep or strict checks (def is strict)\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tWithout(keys: K[], values: V[], deep?: boolean): Map<K, V>\r\n\t\t\r\n\t\t/**\r\n\t\t * Takes the first entry of the map, returns null if it doesn't exist\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tTake(): { key: K, value: V } | null;\r\n\t\t\r\n\t\t/**\r\n\t\t * Takes the first x element of the map\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tTake(val?: number): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Takes the element while it fulfills while it fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tTakeWhile(predicate: (k: K, v: V) => boolean): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove the x element of the map\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tSkip(val: number): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Skips the element while it fulfills while it fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tSkipWhile(predicate: (k: K, v: V) => boolean): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Remove the last x element of the map\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tOmit(val: number): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Omits each element while the element fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tOmitWhile(predicate: (k: K, v: V) => boolean): Map<K, V>\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns the last value of the map\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tLast(): null | { key: K, value: V };\r\n\t\t\r\n\t\t/**\r\n\t\t * Take the last x element of the map.\r\n\t\t * @param val x\r\n\t\t */\r\n\t\tLast(val: number): Map<K, V>;\r\n\t\t\r\n\t\t/**\r\n\t\t * Takes the each last element while elements fulfils the predicate\r\n\t\t * @param predicate\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tLastWhile(predicate: (k: K, v: V) => boolean): Map<K, V>\r\n\t\t\r\n\t\t/**Converts the map to entry array */\r\n\t\tArr(): [K, V][];\r\n\t\t\r\n\t\t/**\r\n\t\t * Gets the keys as an array\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tKeys(): K[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Gets the values as an array\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tValues(): V[];\r\n\t\t\r\n\t\t/**\r\n\t\t * Converts it to a object literal\r\n\t\t * @param key conversion of key to string as object key\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tAsObject(key?: (k: K) => string): object;\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the first key that matches the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tFind(predicate: (k: K, v: V) => boolean): { key: K, value: V } | null;\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the entry with the largest score\r\n\t\t * @param f scoring strategy\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tMax(f: (k: K, v: V) => number): { key: K, value: V };\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the entry with the smallest score\r\n\t\t * @param f scoring strategy\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tMin(f: (k: K, v: V) => number): { key: K, value: V };\r\n\t\t\r\n\t\t/**\r\n\t\t * Get the summation of the collection using the strategy\r\n\t\t * @param f scoring strategy\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tSum(f?: (k: K, v: V) => number): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Reduces the map using the reduce function\r\n\t\t * @param r reduce function\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tReduce(r: (aV: { key: K, value: V }, bV: { key: K, value: V }) => { key: K, value: V }): { key: K, value: V };\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if any of the entry fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tAny(predicate: (k: K, v: V) => boolean): boolean;\r\n\t\t\r\n\t\t/**\r\n\t\t * Check if all of the entry fulfils the predicate\r\n\t\t * @param predicate condition\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tAll(predicate: (k: K, v: V) => boolean): boolean;\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tinterface Number {\r\n\t\t\r\n\t\t/**Check if it is odd.\r\n\t\t * Floating points and 0 are not odd.\r\n\t\t * Infinity is not odd */\r\n\t\tOdd(): boolean;\r\n\t\t\r\n\t\t/**Check if it is even.\r\n\t\t * Floating points and 0 are not even.\r\n\t\t * Infinity is not even */\r\n\t\tEven(): boolean;\r\n\t\t\r\n\t\t/**Check if number is integer\r\n\t\t * Inifinity is not a integer*/\r\n\t\tInt(): boolean;\r\n\t\t\r\n\t\t/**Check if number is finite. NaN is not finite */\r\n\t\tFinite(): boolean;\r\n\t\t\r\n\t\t/**Check if number is infinite. NaN is not infinite */\r\n\t\tInfinite(): boolean;\r\n\t\t\r\n\t\t/**Check if number is NaN. inifinity is a number */\r\n\t\tNaN(): boolean;\r\n\t\t\r\n\t\t/**Rounds off the number.\r\n\t\t * Round towards inifinity or negative inifinity if its it 0.5 and above\r\n\t\t * Round towrard zero if it is below 0.5\r\n\t\t * Returns same value if number is not finite*/\r\n\t\tRoundOff(): number;\r\n\t\t\r\n\t\t/**Rounds the number towards 0\r\n\t\t Returns same value if number is not finite*/\r\n\t\tFloor(): number;\r\n\t\t\r\n\t\t/**Rounds the number towards infinity or negative infinity\r\n\t\t Returns same value if number is not finite*/\r\n\t\tCeil(): number;\r\n\t\t\r\n\t\t/**Returns a non-negative number.\r\n\t\t * Cannot aboslute inifinity*/\r\n\t\tAbs(): number;\r\n\t\t\r\n\t\t/**Gets the square root of a number\r\n\t\t * Cannot square root negative number\r\n\t\t * Cannot square root inifinity*/\r\n\t\tRoot(): number;\r\n\t\t\r\n\t\t/**Converts string or number to int, if format is valid\r\n\t\t * Throws exception if number or string is not valid*/\r\n\t\tToInt(): number;\r\n\t\t\r\n\t\t/**Converts string or number to float, if format is valid\r\n\t\t * Throws exception if number or string is not valid*/\r\n\t\tToFloat(): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Make sure this number does not exceed the max value.\r\n\t\t * @param max the max number\r\n\t\t */\r\n\t\tAtMax(max: number): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Make sure this number does not fall below the stated value\r\n\t\t * @param min  the minimum the number has to be\r\n\t\t */\r\n\t\tAtMin(min: number): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Clamps the number between the two values\r\n\t\t * @param constrain1 one side of the constrain\r\n\t\t * @param constrain2 the other side of the constrain\r\n\t\t */\r\n\t\tClamp(constrain1: number, constrain2: number): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Generates a random number between the host number and the provided number\r\n\t\t * @param to maximum random number to generate\r\n\t\t * @param integer whether to make it integer\r\n\t\t */\r\n\t\tRandomTo(to: number, integer?: boolean): number;\r\n\t\t\r\n\t\t/**\r\n\t\t * Generates n-number of possible random numbers from the starting value.\r\n\t\t * ie 5.Random for 10 would give random number between 5 and 14 (both inclusive)\r\n\t\t * @param n the number of possiblity\r\n\t\t * @param integer whether to round as interger\r\n\t\t */\r\n\t\tRandomFor(n: number, integer?: boolean): number;\r\n\t\t\r\n\t\t// /**\r\n\t\t//  * Generates random number with the starting value as mid point.\r\n\t\t//  * The range of possible output is will be divided equally before and after the midpoint\r\n\t\t//  * @param range number of possilibty\r\n\t\t//  * @param integer whether to round as integer\r\n\t\t//  */\r\n\t\t// RandomAround(range: number, integer?: boolean): number;\r\n\t\t\r\n\t}\r\n\t\r\n\tinterface SortMethod {\r\n\t\tIsNum: boolean;\r\n\t}\r\n}\r\n\r\ninterface Core {\r\n\t// readonly SPACE: string;\r\n\t// readonly LEFT_TAG: string;\r\n\t// readonly RIGHT_TAG: string;\r\n\t// readonly AMPERSAND: string;\r\n\t// readonly SINGLE_QUOTE: string;\r\n\t// readonly DOUBLE_QUOTE: string;\r\n\t\r\n\tIsExtended: boolean;\r\n\t\r\n\t/**\r\n\t * Assert that core has been extended, throws an error if core is not extended\r\n\t * @constructor\r\n\t */\r\n\tAssertExtend(): void;\r\n\t\r\n\t/**\r\n\t * Check typeof variable is string\r\n\t * @param any\r\n\t * @constructor\r\n\t */\r\n\tIsAnyString(any: any): boolean;\r\n\t\r\n\t/**\r\n\t * Check if its a string and not an trimmed empty string\r\n\t * @param any\r\n\t * @constructor\r\n\t */\r\n\tIsString(any: any): boolean;\r\n\t\r\n\t/**\r\n\t * Check if its typeof is number\r\n\t * @param any\r\n\t * @constructor\r\n\t */\r\n\tIsAnyNumber(any: any): boolean;\r\n\t\r\n\t/**\r\n\t * Check if its a usable number\r\n\t * Ensure not infinity and not NaN\r\n\t * @param any - target to check\r\n\t * @param allowString where to parse strings, default false\r\n\t * @constructor\r\n\t */\r\n\tIsNumber(any: any, allowString?: boolean): boolean;\r\n\t\r\n\t/**\r\n\t * Check if 2 objects are deeply equal\r\n\t * @param a first object\r\n\t * @param b second object\r\n\t * @constructor\r\n\t */\r\n\tDeepEqual(a: any, b: any): boolean;\r\n\t\r\n\t/**\r\n\t * Check if target is number array\r\n\t * @param arr array\r\n\t * @constructor\r\n\t */\r\n\tIsNumberArray(arr: any[]): arr is number[];\r\n\t\r\n\t/**\r\n\t * Check if target is string arr\r\n\t * @param arr - arr\r\n\t * @constructor\r\n\t */\r\n\tIsStringArray(arr: any[]): arr is string[];\r\n\t\r\n\t/**\r\n\t * Check if target is boolean array\r\n\t * @param arr\r\n\t * @constructor\r\n\t */\r\n\tIsBooleanArray(arr: any[]): arr is boolean[];\r\n\t\r\n\t/**\r\n\t * Wrap the target as a single element array if its not already an array\r\n\t * @param arr\r\n\t * @constructor\r\n\t */\r\n\tWrapArray<T>(arr: T | T[]): T[];\r\n\t\r\n\t/**\r\n\t * Check if target is an array\r\n\t * @param arr\r\n\t * @constructor\r\n\t */\r\n\tIsArray(arr: any): boolean;\r\n\t\r\n\t/**\r\n\t * Flattens and object to a map\r\n\t * @param obj\r\n\t * @constructor\r\n\t */\r\n\tFlattenObject(obj: object): Map<string, any>;\r\n\t\r\n\t/**\r\n\t * Equality check helper\r\n\t * @param a first object to compare\r\n\t * @param b second object to compare\r\n\t * @param deep whether to use deep comparison\r\n\t * @constructor\r\n\t */\r\n\tEq(a: any, b: any, deep: boolean): boolean;\r\n\t\r\n\t/**\r\n\t * Generate random string with N length\r\n\t * @param N length of the string\r\n\t * @constructor\r\n\t */\r\n\tRandom(N: number): string;\r\n\t\r\n\tExtendPrimitives(): void;\r\n}\r\n\r\nexport {Core, Kore, SortType}"],"sourceRoot":""}